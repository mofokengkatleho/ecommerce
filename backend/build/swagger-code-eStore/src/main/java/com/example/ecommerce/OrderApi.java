/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.ecommerce;

import com.example.ecommerce.model.NewOrder;
import com.example.ecommerce.model.Order;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Order", description = "the Order API")
public interface OrderApi {

    /**
     * POST /api/v1/orders : Creates a new order for the given order request
     * Creates a new order for the given order request.
     *
     * @param newOrder New Order Request object (optional)
     * @return Order added successfully (status code 201)
     *         or If payment is not authorized. (status code 406)
     */
    @ApiOperation(value = "Creates a new order for the given order request", nickname = "addOrder", notes = "Creates a new order for the given order request.", response = Order.class, responseContainer = "List", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Order added successfully", response = Order.class, responseContainer = "List"),
        @ApiResponse(code = 406, message = "If payment is not authorized.") })
    @RequestMapping(value = "/api/v1/orders",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/xml", "application/json" },
        method = RequestMethod.POST)
    Mono<ResponseEntity<Flux<Order>>> addOrder(@ApiParam(value = "New Order Request object"  )  @Valid @RequestBody(required = false) Mono<NewOrder> newOrder, ServerWebExchange exchange);


    /**
     * GET /api/v1/orders : Returns the orders of given user
     * Returns orders of given user
     *
     * @param customerId Customer Identifier (required)
     * @return If order exists. (status code 200)
     *         or Order doesn&#39;t exist for given user. (status code 404)
     */
    @ApiOperation(value = "Returns the orders of given user", nickname = "getOrdersByCustomerId", notes = "Returns orders of given user", response = Order.class, responseContainer = "List", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If order exists.", response = Order.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Order doesn't exist for given user.") })
    @RequestMapping(value = "/api/v1/orders",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    Mono<ResponseEntity<Flux<Order>>> getOrdersByCustomerId(@NotNull @ApiParam(value = "Customer Identifier", required = true) @Valid @RequestParam(value = "customerId", required = true) String customerId, ServerWebExchange exchange);


    /**
     * GET /api/v1/orders/{id} : Returns the order of given order ID
     * Returns orders of given order ID
     *
     * @param id Order Identifier (required)
     * @return If order exists. (status code 200)
     *         or Order doesn&#39;t exist for given user. (status code 404)
     */
    @ApiOperation(value = "Returns the order of given order ID", nickname = "getOrdersByOrderId", notes = "Returns orders of given order ID", response = Order.class, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If order exists.", response = Order.class),
        @ApiResponse(code = 404, message = "Order doesn't exist for given user.") })
    @RequestMapping(value = "/api/v1/orders/{id}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    Mono<ResponseEntity<Order>> getOrdersByOrderId(@ApiParam(value = "Order Identifier",required=true) @PathVariable("id") String id, ServerWebExchange exchange);

}
