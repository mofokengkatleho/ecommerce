/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.ecommerce;

import com.example.ecommerce.model.Authorization;
import com.example.ecommerce.model.Shipment;
import com.example.ecommerce.model.ShippingReq;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Shipping", description = "the Shipping API")
public interface ShippingApi {

    /**
     * GET /api/v1/shipping : Return the Shipment
     * Return the Shipment for the specified order
     *
     * @param id Order Identifier (required)
     * @return For successful fetch. (status code 200)
     */
    @ApiOperation(value = "Return the Shipment", nickname = "getShipmentByOrderId", notes = "Return the Shipment for the specified order", response = Shipment.class, responseContainer = "List", tags={ "shipping", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "For successful fetch.", response = Shipment.class, responseContainer = "List") })
    @RequestMapping(value = "/api/v1/shipping",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    Mono<ResponseEntity<Flux<Shipment>>> getShipmentByOrderId(@NotNull @ApiParam(value = "Order Identifier", required = true) @Valid @RequestParam(value = "id", required = true) String id, ServerWebExchange exchange);


    /**
     * POST /api/v1/shipping : Ship the specified shipping request
     * Ship the specified shipping request
     *
     * @param shippingReq  (optional)
     * @return For successful fetch. (status code 200)
     */
    @ApiOperation(value = "Ship the specified shipping request", nickname = "shipOrder", notes = "Ship the specified shipping request", response = Authorization.class, tags={ "shipping", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "For successful fetch.", response = Authorization.class) })
    @RequestMapping(value = "/api/v1/shipping",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/xml", "application/json" },
        method = RequestMethod.POST)
    Mono<ResponseEntity<Authorization>> shipOrder(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Mono<ShippingReq> shippingReq, ServerWebExchange exchange);

}
